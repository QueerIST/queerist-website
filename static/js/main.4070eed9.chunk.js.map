{"version":3,"sources":["components/Footer.js","components/Header.js","pages/Home.js","components/Page.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","Header","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","openMenu","handleClickButton","bind","assertThisInitialized","setState","menustatus","className","onClick","src","React","Component","Home","Page","pages_Home","App","components_Header","components_Page","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAIeA,EAFA,kBAAMC,EAAAC,EAAAC,cAAA,oBCiCNC,qBA/Bd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAAEC,UAAU,GACzBR,EAAKS,kBAAoBT,EAAKS,kBAAkBC,KAAvBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAHZA,mFAObG,KAAKS,SAAS,CAAEJ,UAAWL,KAAKI,MAAMC,4CAItC,IAAMK,EAAaV,KAAKI,MAAMC,SAAW,gBAAkB,GAC3D,OACCZ,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,UACdlB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,oBACdlB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,UACdlB,EAAAC,EAAAC,cAAA,KAAGgB,UAAU,6BAA6BC,QAASZ,KAAKM,mBAAxD,QACAb,EAAAC,EAAAC,cAAA,KAAGgB,UAAU,UACZlB,EAAAC,EAAAC,cAAA,OAAKkB,IAAI,uCAEVpB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,iBAEhBlB,EAAAC,EAAAC,cAAA,KAAGgB,UAAW,UAAYD,GAA1B,WACAjB,EAAAC,EAAAC,cAAA,KAAGgB,UAAW,UAAYD,GAA1B,YACAjB,EAAAC,EAAAC,cAAA,KAAGgB,UAAW,UAAYD,GAA1B,kBAzBgBI,IAAMC,YCOZC,mLALb,OAAO,YAHUF,IAAMC,WCGVE,EAFF,kBAAMxB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACuB,EAAD,QCYTC,mLAVX,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,cANUP,aCSEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4070eed9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Footer = () => <div></div>\r\n\r\nexport default Footer","import React from 'react'\r\nimport './header.css'\r\n\r\nclass Header extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = { openMenu: false }\r\n\t\tthis.handleClickButton = this.handleClickButton.bind(this);\r\n\t}\r\n\r\n\thandleClickButton() {\r\n\t\tthis.setState({ openMenu: !this.state.openMenu })\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst menustatus = this.state.openMenu ? \" navmenu-open\" : \"\"\r\n\t\treturn (\r\n\t\t\t<div className=\"navbar\">\r\n\t\t\t\t<div className=\"navbar-container\">\r\n\t\t\t\t\t<div className=\"navtop\">\r\n\t\t\t\t\t\t<i className=\"navtop-side material-icons\" onClick={this.handleClickButton}>menu</i>\r\n\t\t\t\t\t\t<a className=\"navimg\">\r\n\t\t\t\t\t\t\t<img src=\"assets/logo so letras brancas.png\"></img>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<div className=\"navtop-side\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<a className={\"navlink\" + menustatus}>Eventos</a>\r\n\t\t\t\t\t<a className={\"navlink\" + menustatus}>Projetos</a>\r\n\t\t\t\t\t<a className={\"navlink\" + menustatus}>Merch</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nclass Home extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn null\r\n\t}\r\n}\r\n\r\n\r\nexport default Home","import React from 'react'\r\nimport { Home } from '../pages'\r\n\r\nconst Page = () => <div><Home></Home></div>\r\n\r\nexport default Page","import React, { Component } from 'react'\nimport { Header, Page, Footer } from './components'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header></Header>\n        <Page></Page>\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}